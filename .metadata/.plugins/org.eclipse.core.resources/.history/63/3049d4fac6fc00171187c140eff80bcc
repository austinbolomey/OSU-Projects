import java.util.Comparator;

import components.map.Map;
import components.map.Map1L;
import components.queue.Queue;
import components.queue.Queue1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Put a short phrase describing the program here.
 *
 * @author Put your name here
 *
 */
public final class WordCounter {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private WordCounter() {
    }

    /**
     * Sorts {@code q} according to the ordering provided by the {@code compare}
     * method from {@code order}.
     *
     * @param q
     *            the queue
     * @param order
     *            ordering by which to sort
     * @updates q
     * @requires [the relation computed by order.compare is a total preorder]
     * @ensures q = [#q ordered by the relation computed by order.compare]
     */
    public static void sort(Queue<String> q, Comparator<String> order) {
        int length = q.length();
        Queue<String> temp = new Queue1L<String>();
        String min;
        //adds the smallest value into the queue
        for (int i = 0; i < length; i++) {
            min = removeMin(q, order);
            temp.enqueue(min);
        }
        for (int i = 0; i < length; i++) {
            min = temp.dequeue();
            q.enqueue(min);

        }

    }

    /**
     * separates string into individual words and adds them to a queue
     *
     * @return
     */
    public static Map<String, Integer> counter(Queue<String> q) {
        Map<String, Integer> mapcounter = new Map1L<String, Integer>();
        Queue<String> qcopy = q;
        int length = qcopy.length();
        for (int i = 0; i < length; i++) {
            String temp = qcopy.dequeue();
            if (!mapcounter.hasKey(temp)) {
                mapcounter.add(temp, 1);
            } else {
                int number = mapcounter.value(temp);
                mapcounter.replaceValue(temp, number + 1);
            }
        }
        return mapcounter;
    }

    /**
     * separates string into individual words and adds them to a queue
     *
     * @param s
     *            input string
     * @return queue of words
     */
    public static Queue<String> separator(String s) {

        String temp = "";

        Queue<String> words = new Queue1L<String>();
        for (int i = 0; i < s.length(); i++) {
            if (!s.substring(i, i + 1).equals(" ")
                    && !s.substring(i, i + 1).equals(".")
                    && !s.substring(i, i + 1).equals(",")
                    && !s.substring(i, i + 1).equals("?")) {

                temp = temp.concat(s.substring(i, i + 1));

            } else {

                if (temp.length() > 0) {
                    words.enqueue(temp);
                }
                temp = "";
            }
        }
        //adds the last word
        if (temp.length() > 0) {
            words.enqueue(temp);
        }

        return words;

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        Map<String, String> map = new Map1L<String, String>();
        Queue<String> allwords = new Queue1L<String>();
        //        String inputfile = in.nextLine();
        String inputfile = "http://web.cse.ohio-state.edu/software/2231/web-sw2/assignments/projects/count-words/data/gettysburg.txt";

        SimpleReader intext = new SimpleReader1L(inputfile);
        while (!intext.atEOS()) {
            allwords.append(separator(intext.nextLine()));
        }
        out.print(allwords.toString());

        /*
         * Close input and output streams
         */
        in.close();
        intext.close();
        out.close();
    }

}
