import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Alexander Vue
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //storing values for title, description, and link
        String title = "", description = "", link;

        int titlePosition = getChildElement(channel, "title");
        int descPosition = getChildElement(channel, "description");
        int linkPosition = getChildElement(channel, "link");

        if (channel.child(titlePosition).numberOfChildren() >= 0) {
            title = channel.child(titlePosition).child(0).label();
        }

        if (channel.child(descPosition).numberOfChildren() >= 0) {
            description = channel.child(descPosition).child(0).label();
        }

        link = channel.child(linkPosition).child(0).label();

        //xhtml code start, makes the table and sets the foundation of the page
        out.println("<html><head><title>" + title + "</title></head><body>");
        out.println("<h1><a href= \"" + link + "\">" + title + "</a></h1>");
        out.println("<p>");
        out.println(description);
        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //end of the xhtml code
        out.println("</table>");
        out.println("</body> </html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = 0, length = xml.numberOfChildren(), position = -1;

        //continues while a position is not found or i < numberOfChildren
        while (position < 0 && i < length) {
            if (xml.child(i).label().equals(tag)) {
                position = i;
            }
            i++;
        }

        return position;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int length = item.numberOfChildren(), link = -1, title = -1, date = -1,
                source = -1, i = 0;

        //finds the position of the title, link, pubDate, and source
        while (i < length) {
            if (item.child(i).label().equals("title")) {
                title = i;
            }
            if (item.child(i).label().equals("link")) {
                link = i;
            }
            if (item.child(i).label().equals("pubDate")) {
                date = i;
            }
            if (item.child(i).label().equals("source")) {
                source = i;
            }
            i++;
        }

        String titleLabel = "No title available",
                sourceLabel = "No source available",
                dateLabel = "No date available", sourceURL = "";

        //sets the labels to their corresponding positions
        if (title != -1) {
            titleLabel = item.child(title).child(0).label();
        }
        if (source != -1) {
            sourceLabel = item.child(source).child(0).label();
            if (item.child(source).hasAttribute("url")) {
                sourceURL = item.child(source).attributeValue("url");
            }
        }
        if (date != -1) {
            dateLabel = item.child(date).child(0).label();
        }

        String linkLabel = item.child(link).child(0).label();

        //print xhtml to create the page
        out.println("<tr>");
        out.println("<th>" + dateLabel + "</th>");

        //if no source exist, do not hyperlink to "" and just print "no sources..."
        if (sourceURL.equals("")) {
            out.println("<th>" + sourceLabel + "</th>");
        } else { //otherwise source and url exist
            out.println("<th><a href= \"" + sourceURL + "\">" + sourceLabel
                    + "</a></th>");
        }
        out.println("<th><a href= \"" + linkLabel + "\">" + titleLabel
                + "</a></th>");
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L(),
                outFile = new SimpleWriter1L("project.html");

        /*
         * Input the source URL.
         */
        out.print("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();
        /*
         * Read XML input and initialize XMLTree. If input is not legal XML,
         * this statement will fail.
         */
        XMLTree xml = new XMLTree1(url);
        boolean correct = false;

        // Checks if the RSS is version 2.0
        if (xml.hasAttribute("version")) {
            if (xml.attributeValue("version").equals("2.0")) {
                correct = true;
                out.println("Valid RSS version.");
            } else {
                out.println("Invalid RSS version.");
            }
        }

        //only executes for version 2.0
        //used http://web.resource.org/rss/ (1.0) and http://news.yahoo.com/rss/ (2.0) to test
        if (correct) {
            /*
             * Extract <channel> element.
             */
            int channelPosition = getChildElement(xml, "channel");

            XMLTree channel = xml.child(channelPosition);

            //begin writing xhtml file
            outputHeader(channel, outFile);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), outFile);
                }
            }

            outputFooter(outFile);

        } else {
            out.println("No futher action was taken.");
        }

        in.close();
        out.close();
        outFile.close();

    }
}
